#Generate model based on historical data#Import packagesimport pandas as pdimport csvfrom sklearn.linear_model import LinearRegression#Import historical data as dataframehistory_df = pd.read_excel('/Users/John/Desktop/history.xlsx')#Pick columns of independent variablesXs_history = history_df.drop(['Price', 'Property_ID'], axis=1)#Pick the column of the dependent variableY_history = history_df['Price'].values.reshape(-1,1)#Generate multiple linear regression modelmodel = LinearRegression()model.fit(Xs_history, Y_history)#Print parameters of the modelprint("intercept:",model.intercept_,", coefficients:",model.coef_)#Import property data as dataframeproperty_df = pd.read_excel('/Users/John/Desktop/property.xlsx')#Pick columns of independent variablesXs_property = property_df.drop(['Price', 'List_ID'], axis=1)#Predict prices of current propertiesY_property = model.predict(Xs_property)#Integerize predicted pricesY_property = Y_property.astype(int)#Append predicted prices to property dataframeproperty_df['predicted_price'] = Y_property#Transform property dataframe into a list of dictionaries for propertiesproperty_list = property_df.to_dict('records')#Use case 1#Define the function to search for properties based on criterias#Parameters include size, type, location, lower and upper bounds of price #Return search result as a list to the functiondef search_by_criterias(Size,Type,Location,Lower_Bound,Upper_Bound):        #Generate an empty list for search result    search_result = []        #Iterate the property list to filter properties    for property in property_list:                if (property['#room'] == Size and                        property['Type'] == Type and                        property['Location'] == Location and                        property['Price'] >= Lower_Bound and                        property['Price'] <= Upper_Bound):                        #Store desired properties in the list                        search_result.append(property)        #Option to save search result        save = str(input('Input yes if you wish to save search result:'))         #Save search result to .csv file if required        if save == 'yes':                f = open("/Users/John/Desktop/case 1 search result.csv", "w")                writer = csv.DictWriter(f, fieldnames=["List_ID","#room","Type","Location","Price","predicted_price"])                writer.writeheader()                writer.writerows(search_result)                f.close()                print("search result saved to 'case 1 search result.csv'")        #Return search result to the function                return search_result#Define the function to calculate mortgage information for selected property#Parameters include List_ID, annual income, deposit and mortgage length#No return, print calculated mortgage informationdef calculate_mortgage(List_ID,income,deposit,length):        #Read the price of selected property from property list        price = property_list[List_ID-1]['Price']        #Read the predicted price of selected property from property list        predicted_price = property_list[List_ID-1]['predicted_price']        #Calculate maximum loan based on annual income        if income <= 100000:                maximum_loan = income * 3.5            elif income <= 250000:                maximum_loan = income * 4            else:                maximum_loan = income * 4.5        #Option to save mortgage information        save = str(input('Input yes if you wish to save mortgage information:'))         #Mortgage not needed if price <= deposit        if price <= deposit:                mortgage_information = [{"List_ID":List_ID,"mortgage":"mortgage not needed"}]                #Save mortgage information to .csv file if required                if save == 'yes':                    f = open("/Users/John/Desktop/mortgage information.csv", "w")                    writer = csv.DictWriter(f, fieldnames=["List_ID","mortgage"])                    writer.writeheader()                    writer.writerows(mortgage_information)                    f.close()                    print("mortgage information saved to 'mortgage information.csv'")                #Return mortgage information to the function                return mortgage_information        #Calculate the amount of loan        loan = price - deposit        #Mortgage rejected if two conditions not satisfied        if not(loan <= maximum_loan and loan <= predicted_price):                mortgage_information = [{"List_ID":List_ID,"mortgage":"mortgage rejected"}]                #Save mortgage information to .csv file if required                if save == 'yes':                    f = open("/Users/John/Desktop/mortgage information.csv", "w")                    writer = csv.DictWriter(f, fieldnames=["List_ID","mortgage"])                    writer.writeheader()                    writer.writerows(mortgage_information)                    f.close()                    print("mortgage information saved to 'mortgage information.csv'")                #Return mortgage information to the function                return mortgage_information        #Mortgage approved if two conditions are satisfied        #Calculate annual interest rate based on LTV                LTV = loan / price            if LTV < 0.8:                    annual_rate = 0.0299                elif LTV < 0.85:                    annual_rate = 0.0349                elif LTV < 0.9:                    annual_rate = 0.0399                elif LTV < 0.95:                    annual_rate = 0.0449                else:                    annual_rate = 0.0499        #Calculate monthly interest rate        monthly_rate = annual_rate / 12        #Calculate the total number of payments        months = length * 12        #Calculate monthly payment        monthly_payment = loan * monthly_rate * ((1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)         #Round it to integer        monthly_payment = round(monthly_payment)        mortgage_information = [{"List_ID":List_ID,"mortgage":"mortgage approved","monthly payment":monthly_payment}]        #Save mortgage information to .csv file if required        if save == 'yes':                f = open("/Users/John/Desktop/mortgage information.csv", "w")                writer = csv.DictWriter(f, fieldnames=["List_ID","mortgage","monthly payment"])                writer.writeheader()                writer.writerows(mortgage_information)                f.close()                print("mortgage information saved to 'mortgage information.csv'")        #Return mortgage information to the function        return mortgage_information#Use case 2#Define the function to calculate customer's affordability#Parameters include annual income and deposit#Return the customer's affordability to the functiondef calculate_affordability(income,deposit):        #Calculate maximum loan based on annual income        if income <= 100000:                maximum_loan = income * 3.5            elif income <= 250000:                maximum_loan = income * 4            else:                maximum_loan = income * 4.5            #Calculate customer's affordability        affordability = maximum_loan + deposit        #Return affordability to the function        return affordability#Define the function to search for properties based on affordability and criterias#Parameters include income, deposit, size, type and location#Return search result as a list to the functiondef search_by_affordability(income,deposit,Size,Type,Location):        #Generate an empty list for search result        search_result = []        #Calculate affordability using previously defined function        affordability = calculate_affordability(income,deposit)        #Iterate the property list to filter properties        for property in property_list:                if (property['#room'] == Size and                        property['Type'] == Type and                        property['Location'] == Location and                        property['Price'] <= affordability):                        #Store desired properties in the list                        search_result.append(property)        #Option to save search result        save = str(input('Input yes if you wish to save search result:'))         #Save search result if required        if save == 'yes':                f = open("/Users/John/Desktop/case 2 search result.csv", "w")                writer = csv.DictWriter(f, fieldnames=["List_ID","#room","Type","Location","Price","predicted_price"])                writer.writeheader()                writer.writerows(search_result)                f.close()                print("search result saved to 'case 2 search result.csv'")        #Return search result to the function                return search_result        